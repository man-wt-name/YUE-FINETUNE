#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ YuE –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞
"""

import os
import sys
import importlib.util

def check_file_exists(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    return os.path.exists(filepath)

def check_import(module_name, filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è."""
    try:
        spec = importlib.util.spec_from_file_location(module_name, filepath)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return True
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ YuE...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.dirname(os.path.abspath(__file__))
    
    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    critical_paths = [
        "finetune/__init__.py",
        "finetune/core/__init__.py",
        "finetune/core/datasets/__init__.py",
        "finetune/core/tokenizer/__init__.py",
        "finetune/pipeline/__init__.py",
        "finetune/tools/__init__.py",
        "finetune/scripts/__init__.py",
        "finetune/new_yue_trainer.py",
        "finetune/pipeline/new_config.py",
        "finetune/pipeline/new_steps.py",
        "finetune/tools/codecmanipulator.py",
        "requirements.txt"
    ]
    
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:")
    missing_files = []
    
    for path in critical_paths:
        full_path = os.path.join(project_root, path)
        if check_file_exists(full_path):
            print(f"  ‚úÖ {path}")
        else:
            print(f"  ‚ùå {path} - –ù–ï –ù–ê–ô–î–ï–ù")
            missing_files.append(path)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {len(missing_files)}")
        for file in missing_files:
            print(f"    - {file}")
        return False
    
    print("\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤:")
    
    # –¢–µ—Å—Ç 1: CodecManipulator
    codec_path = os.path.join(project_root, "finetune", "tools", "codecmanipulator.py")
    if check_import("codecmanipulator", codec_path):
        print("  ‚úÖ CodecManipulator –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("  ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º CodecManipulator")
        return False
    
    # –¢–µ—Å—Ç 2: new_steps
    steps_path = os.path.join(project_root, "finetune", "pipeline", "new_steps.py")
    if check_import("new_steps", steps_path):
        print("  ‚úÖ new_steps –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("  ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º new_steps")
        return False
    
    # –¢–µ—Å—Ç 3: new_config
    config_path = os.path.join(project_root, "finetune", "pipeline", "new_config.py")
    if check_import("new_config", config_path):
        print("  ‚úÖ new_config –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("  ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º new_config")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PYTHONPATH
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ PYTHONPATH:")
    current_pythonpath = os.environ.get('PYTHONPATH', '')
    print(f"  –¢–µ–∫—É—â–∏–π PYTHONPATH: {current_pythonpath}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—É—Ç–∏ –¥–ª—è PYTHONPATH
    recommended_paths = [
        project_root,
        os.path.join(project_root, "finetune"),
        os.path.join(project_root, "finetune", "tools"),
        os.path.join(project_root, "finetune", "pipeline")
    ]
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—É—Ç–∏ –¥–ª—è PYTHONPATH:")
    for path in recommended_paths:
        if os.path.exists(path):
            print(f"  ‚úÖ {path}")
        else:
            print(f"  ‚ùå {path} - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 