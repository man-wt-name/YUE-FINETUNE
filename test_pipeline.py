#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã pipeline —Å –ø—Ä–æ–ø—É—Å–∫–æ–º —à–∞–≥–æ–≤
"""

import subprocess
import sys
import os

def test_pipeline_convert_only():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É pipeline —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∞—É–¥–∏–æ."""
    print("üß™ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã pipeline —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π...")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    cmd = [
        "python", "finetune/new_yue_trainer.py", "pipeline",
        "--input-dir", "/kaggle/input/strukalo",
        "--output-dir", "/kaggle/working/",
        "--skip-steps", "preprocess", "dataset", "count", "train"
    ]
    
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìã –í—ã–≤–æ–¥:")
            print(result.stdout)
        else:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
            print("üìã –û—à–∏–±–∫–∞:")
            print(result.stderr)
            print("üìã –í—ã–≤–æ–¥:")
            print(result.stdout)
            
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚è∞ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_pipeline_help():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã pipeline."""
    print("üß™ –¢–µ—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã pipeline...")
    
    cmd = ["python", "finetune/new_yue_trainer.py", "pipeline", "--help"]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("üìã –°–ø—Ä–∞–≤–∫–∞:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏!")
            print(result.stderr)
            
        return result.returncode == 0
        
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã pipeline")
    print("=" * 50)
    
    tests = [
        ("–°–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã", test_pipeline_help),
        ("–¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", test_pipeline_convert_only),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîß –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ö–æ–º–∞–Ω–¥–∞ pipeline —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìã –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("python finetune/new_yue_trainer.py pipeline \\")
        print("  --input-dir /path/to/audio \\")
        print("  --output-dir ./output \\")
        print("  --skip-steps preprocess dataset count train")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 