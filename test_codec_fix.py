#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–µ–∫–æ–º xcodec_16k
"""

import sys
import os
import numpy as np

def test_codec_manipulator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CodecManipulator —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–µ–∫–∞–º–∏."""
    print("üß™ –¢–µ—Å—Ç CodecManipulator —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–µ–∫–∞–º–∏...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
    project_root = os.path.dirname(os.path.abspath(__file__))
    tools_path = os.path.join(project_root, "finetune", "tools")
    sys.path.insert(0, tools_path)
    
    try:
        from codecmanipulator import CodecManipulator
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–¥–µ–∫–∏
        codecs_to_test = ["semanticodec", "xcodec", "xcodec_16k", "dac16k", "dac44k"]
        
        for codec_type in codecs_to_test:
            print(f"\nüîß –¢–µ—Å—Ç –∫–æ–¥–µ–∫–∞: {codec_type}")
            try:
                manipulator = CodecManipulator(codec_type, 0, 4)
                print(f"  ‚úÖ {codec_type} - —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"    - codebook_size: {manipulator.codebook_size}")
                print(f"    - num_codebooks: {manipulator.num_codebooks}")
                print(f"    - global_offset: {manipulator.global_offset}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                test_data = np.random.randint(0, 1024, size=(4, 100), dtype=np.int16)
                print(f"    - –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {test_data.shape}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º npy2ids
                try:
                    ids = manipulator.npy2ids(test_data)
                    print(f"    - npy2ids —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(ids)} —Ç–æ–∫–µ–Ω–æ–≤")
                except Exception as e:
                    print(f"    - ‚ùå npy2ids –æ—à–∏–±–∫–∞: {e}")
                
            except Exception as e:
                print(f"  ‚ùå {codec_type} - –æ—à–∏–±–∫–∞: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CodecManipulator: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_pipeline_with_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–µ–∫–æ–º."""
    print("\nüß™ –¢–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–µ–∫–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ .npy —Ñ–∞–π–ª—ã
    test_dir = "/tmp/test_yue_codec"
    os.makedirs(test_dir, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .npy —Ñ–∞–π–ª
    test_data = np.random.randn(4, 1000).astype(np.float32)
    test_file = os.path.join(test_dir, "test_audio.npy")
    np.save(test_file, test_data)
    
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º CodecManipulator —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
    try:
        tools_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "finetune", "tools")
        sys.path.insert(0, tools_path)
        
        from codecmanipulator import CodecManipulator
        
        manipulator = CodecManipulator("semanticodec", 0, 2)
        json_str = manipulator.npy_to_json_str(test_file)
        
        print(f"  ‚úÖ JSON —Å—Ç—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(json_str)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  üìã JSON: {json_str[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–µ–∫–æ–º")
    print("=" * 50)
    
    tests = [
        ("CodecManipulator —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–µ–∫–∞–º–∏", test_codec_manipulator),
        ("–ü–∞–π–ø–ª–∞–π–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–µ–∫–æ–º", test_pipeline_with_fix),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîß –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–µ–∫–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        print("\nüìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω:")
        print("python finetune/new_yue_trainer.py pipeline \\")
        print("  --input-dir /kaggle/input/strukalo \\")
        print("  --output-dir /kaggle/working/ \\")
        print("  --skip-steps dataset count train")
        return True
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 