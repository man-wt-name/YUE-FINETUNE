#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ YuE
"""

import sys
import os
import subprocess
import importlib.util

def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\nüîß {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_import_module(module_path, module_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è."""
    print(f"\nüîß –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ {module_name}")
    
    try:
        spec = importlib.util.spec_from_file_location(module_name, module_path)
        if spec is None:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å spec –¥–ª—è {module_name}")
            return False
        
        module = importlib.util.module_from_spec(spec)
        if spec.loader is None:
            print(f"‚ùå Loader –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {module_name}")
            return False
            
        spec.loader.exec_module(module)
        print(f"‚úÖ {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ YuE")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = os.path.dirname(os.path.abspath(__file__))
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = []
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    tests.append(("python check_project_structure.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"))
    
    # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    tests.append(("python test_imports.py", "–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"))
    
    # –¢–µ—Å—Ç 3: –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CodecManipulator
    tests.append(("python test_codec_import.py", "–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ CodecManipulator"))
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI
    tests.append(("python run_yue.py pipeline --help", "–ü—Ä–æ–≤–µ—Ä–∫–∞ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"))
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    print("\nüîß –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:")
    
    # –ü—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
    modules_to_test = [
        (os.path.join(project_root, "finetune", "tools", "codecmanipulator.py"), "codecmanipulator"),
        (os.path.join(project_root, "finetune", "pipeline", "new_steps.py"), "new_steps"),
        (os.path.join(project_root, "finetune", "pipeline", "new_config.py"), "new_config"),
        (os.path.join(project_root, "finetune", "new_yue_trainer.py"), "new_yue_trainer")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    finetune_path = os.path.join(project_root, "finetune")
    tools_path = os.path.join(finetune_path, "tools")
    pipeline_path = os.path.join(finetune_path, "pipeline")
    
    for path in [project_root, finetune_path, tools_path, pipeline_path]:
        if path not in sys.path:
            sys.path.insert(0, path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    for module_path, module_name in modules_to_test:
        if os.path.exists(module_path):
            test_import_module(module_path, module_name)
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {module_path}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    print("\nüîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥:")
    passed_tests = 0
    total_tests = len(tests)
    
    for cmd, description in tests:
        if run_command(cmd, description):
            passed_tests += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ü—Ä–æ–µ–∫—Ç YuE –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        print("2. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, microsoft/DialoGPT-medium)")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω:")
        print("   python run_yue.py pipeline --input-dir /path/to/audio --model /path/to/model --output-dir ./output")
        return True
    else:
        print(f"‚ö†Ô∏è  –ü–†–û–ô–î–ï–ù–û {passed_tests} –ò–ó {total_tests} –¢–ï–°–¢–û–í")
        print("\nüîß –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install -r requirements.txt")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –º–µ—Å—Ç–µ")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
        print("4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ INSTALL.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 