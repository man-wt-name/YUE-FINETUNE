#!/usr/bin/env python3
"""
–¢–µ—Å—Ç semanticodec –∫–∞–∫ –∫–æ–¥–µ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'finetune'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'inference'))

def test_default_codec():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º semanticodec –∫–∞–∫ –∫–æ–¥–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    
    print("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ semanticodec –∫–∞–∫ –∫–æ–¥–µ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CodecManipulator
        from finetune.tools.codecmanipulator import CodecManipulator
        print("‚úÖ CodecManipulator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –∫–æ–¥–µ–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (semanticodec)
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å –∫–æ–¥–µ–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        manipulator = CodecManipulator()  # –î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å semanticodec
        print(f"‚úÖ –ö–æ–¥–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {manipulator.codec_type}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–±—É–∫–æ–≤: {manipulator.num_codebooks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ semanticodec
        if manipulator.codec_type == "semanticodec":
            print("üéâ –£—Å–ø–µ—Ö! semanticodec —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∫–æ–¥–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–¥–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {manipulator.codec_type}, –æ–∂–∏–¥–∞–ª—Å—è semanticodec")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º semanticodec
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è semanticodec...")
        semanticodec_manipulator = CodecManipulator("semanticodec", 0, 2)
        print(f"‚úÖ –Ø–≤–Ω—ã–π semanticodec: {semanticodec_manipulator.codec_type}")
        print(f"‚úÖ –ö–æ–¥–±—É–∫–∏: {semanticodec_manipulator.num_codebooks}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–¥–µ–∫–∞–º–∏
        print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–¥–µ–∫–∞–º–∏:")
        codecs = [
            ("semanticodec", 2),
            ("xcodec", 4),
            ("dac16k", 4),
            ("dac44k", 9)
        ]
        
        for codec_type, num_codebooks in codecs:
            try:
                test_manipulator = CodecManipulator(codec_type, 0, num_codebooks)
                print(f"‚úÖ {codec_type}: {test_manipulator.num_codebooks} –∫–æ–¥–±—É–∫–æ–≤")
            except Exception as e:
                print(f"‚ùå {codec_type}: –æ—à–∏–±–∫–∞ - {e}")
        
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("‚Ä¢ semanticodec - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("‚Ä¢ xcodec - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        print("‚Ä¢ dac16k - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –±–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        print("‚Ä¢ dac44k - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ—á–∏")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_cli_defaults():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ CLI"""
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CLI –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    
    try:
        from finetune.new_yue_trainer import create_parser
        parser = create_parser()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è preprocess
        preprocess_parser = None
        for action in parser._subparsers._group_actions:
            if hasattr(action, 'choices'):
                for choice_name, choice_parser in action.choices.items():
                    if choice_name == 'preprocess':
                        preprocess_parser = choice_parser
                        break
        
        if preprocess_parser:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            defaults = {}
            for action in preprocess_parser._actions:
                if action.dest and hasattr(action, 'default'):
                    defaults[action.dest] = action.default
            
            print("üìã –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ CLI:")
            for key, value in defaults.items():
                if key in ['codec_type', 'num_codebooks']:
                    print(f"  ‚Ä¢ {key}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if defaults.get('codec_type') == 'semanticodec':
                print("‚úÖ codec_type –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: semanticodec")
            else:
                print(f"‚ö†Ô∏è  codec_type –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {defaults.get('codec_type')}")
                
            if defaults.get('num_codebooks') == 2:
                print("‚úÖ num_codebooks –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2")
            else:
                print(f"‚ö†Ô∏è  num_codebooks –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {defaults.get('num_codebooks')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CLI: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ semanticodec –∫–∞–∫ –∫–æ–¥–µ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    print("=" * 60)
    
    success1 = test_default_codec()
    success2 = test_cli_defaults()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! semanticodec —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∫–æ–¥–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    print("\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–¥–µ–∫–∞–º: CODECS.md")
    print("‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: README.md") 